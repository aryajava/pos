<!-- Scroll to Top Button-->
<a class="scroll-to-top rounded" href="#page-top">
  <i class="fas fa-angle-up"></i>
</a>

<!-- Delete Modal-->
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel"
  aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteModalLabel">Delete Confirmation</h5>
        <button class="close" type="button" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">×</span>
        </button>
      </div>
      <div class="modal-body">Are you sure you want to delete this item?</div>
      <div class="modal-footer">
        <button class="btn btn-secondary" type="button" data-dismiss="modal">No</button>
        <button id="confirmDelete" class="btn btn-primary" type="button">Yes</button>
      </div>
    </div>
  </div>
</div>

<!-- Logout Modal-->
<div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
  aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Ready to Leave?</h5>
        <button class="close" type="button" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">×</span>
        </button>
      </div>
      <div class="modal-body">Select "Logout" below if you are ready to end your current session.</div>
      <div class="modal-footer">
        <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
        <a class="btn btn-primary" href="/logout">Logout</a>
      </div>
    </div>
  </div>
</div>

<script src="/vendor/jquery/jquery.min.js"></script>
<script src="/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="/vendor/jquery-easing/jquery.easing.min.js"></script>
<script src="/vendor/moment/moment.min.js"></script>
<script src="/js/sb-admin-2.min.js"></script>
<script src="/js/dataTables.min.js"></script>
<script src="/js/dataTables.responsive.min.js"></script>
<script src="/js/dataTables.bootstrap4.min.js"></script>
<script src="/js/responsive.bootstrap4.min.js"></script>
<script src="/js/select2.min.js"></script>
<script src="/vendor/chart.js/Chart.min.js"></script>
<script>
  $.fn.dataTable.ext.type.order['invoice-pre'] = function (data) {
    var matches = data.match(/INV-(?:PENJ)?(\d{8})-(\d+)/);
    if (matches) {
      var datePart = matches[1];
      // var sequencePart = matches[2];
      return parseInt(datePart, 10);
    }
    return 0;
  };
</script>
<!-- jsScripts.ejs -->
<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();

  // socket users
  socket.on('userAdded', (data) => {
    $('#dataTableUser').DataTable().row.add({
      userid: data.userid,
      email: data.email,
      name: data.name,
      role: data.role,
    }).draw(false);
  });
  socket.on('userUpdated', (data) => {
    const userRow = $(`#user-${data.userid}`);
    userRow.find('.user-email').text(data.email);
    userRow.find('.user-name').text(data.name);
    userRow.find('.user-role').text(data.role);
  });
  socket.on('userDeleted', (data) => {
    $('#dataTableUser').DataTable().ajax.reload(null, false);
  });

  // socket units
  socket.on('unitAdded', (data) => {
    console.log(`Socket unitAdd`);
    $('#dataTableUnit').DataTable().row.add({
      unit: data.unit,
      name: data.name,
      note: data.note,
    }).draw(false);
  });
  socket.on('unitUpdated', (data) => {
    const unitRow = $(`#unit-${data.oldUnit}`);
    if (unitRow.length) {
      unitRow.attr('id', `unit-${data.unit}`);
      unitRow.find('.unit-unit').text(data.unit);
      unitRow.find('.unit-name').text(data.name);
      unitRow.find('.unit-note').text(data.note);
    } else {
      console.error(`Element with ID #unit-${data.oldUnit} not found`);
    }
  });
  socket.on('unitDeleted', (data) => {
    $('#dataTableUnit').DataTable().ajax.reload(null, false);
  });

  // socket goods
  socket.on('goodsAdded', (data) => {
    $('#dataTableGoods').DataTable().row.add({
      barcode: data.barcode,
      name: data.name,
      stock: data.stock,
      unit: data.unit,
      purchaseprice: data.purchaseprice,
      sellingprice: data.sellingprice,
      picture: data.picture ? data.picture : 'asset/svg/no-image.svg',
    }).draw(false);
  });
  socket.on('goodsUpdated', (data) => {
    const goodsRow = $(`#goods-${data.barcode}`);
    goodsRow.find('.goods-name').text(data.name);
    goodsRow.find('.goods-stock').text(data.stock);
    goodsRow.find('.goods-unit').text(data.unit);
    goodsRow.find('.goods-purchaseprice').text(new Intl.NumberFormat('id-ID', {
      style: 'currency',
      currency: 'IDR'
    }).format(data.purchaseprice));
    goodsRow.find('.goods-sellingprice').text(new Intl.NumberFormat('id-ID', {
      style: 'currency',
      currency: 'IDR'
    }).format(data.sellingprice));
    goodsRow.find('.goods-picture').attr('src', data.picture ? data.picture : 'asset/svg/no-image.svg');
  });
  socket.on('goodsDeleted', (data) => {
    $('#dataTableGoods').DataTable().ajax.reload(null, false);
  });

  // socket suppliers
  socket.on('supplierAdded', (data) => {
    $('#dataTableSupplier').DataTable().row.add({
      supplierid: data.supplierid,
      name: data.name,
      address: data.address,
      phone: data.phone,
    }).draw(false);
  });
  socket.on('supplierUpdated', (data) => {
    const supplierRow = $(`#supplier-${data.supplierid}`);
    supplierRow.find('.supplier-name').text(data.name);
    supplierRow.find('.supplier-address').text(data.address);
    supplierRow.find('.supplier-phone').text(data.phone);
  });
  socket.on('supplierDeleted', (data) => {
    $('#dataTableSupplier').DataTable().ajax.reload(null, false);
  });

  // socket customers
  socket.on('customerAdded', (data) => {
    $('#dataTableCustomer').DataTable().row.add({
      customerid: data.customerid,
      name: data.name,
      address: data.address,
      phone: data.phone,
    }).draw(false);
  });
  socket.on('customerUpdated', (data) => {
    const customerRow = $(`#customer-${data.customerid}`);
    customerRow.find('.customer-name').text(data.name);
    customerRow.find('.customer-address').text(data.address);
    customerRow.find('.customer-phone').text(data.phone);
  });
  socket.on('customerDeleted', (data) => {
    $('#dataTableCustomer').DataTable().ajax.reload(null, false);
  });

  // socket purchases
  socket.on('purchaseAdded', (data) => {
    $('#dataTablePurchase').DataTable().row.add({
      invoice: data.invoice,
      time: data.time,
      totalsum: data.totalsum,
      suppliername: data.suppliername ? data.suppliername : null,
    }).draw(false);
  });
  socket.on('purchaseUpdated', (data) => {
    const purchaseRow = $(`#purchase-${data.invoice}`);
    purchaseRow.find('.purchase-time').text(data.time);
    purchaseRow.find('.purchase-totalsum').text(new Intl.NumberFormat('id-ID', {
      style: 'currency',
      currency: 'IDR'
    }).format(data.totalsum));
    purchaseRow.find('.purchase-suppliername').text(data.suppliername);
  });
  socket.on('purchaseDeleted', (data) => {
    $('#dataTablePurchase').DataTable().ajax.reload(null, false);
  });

  // socket sales
  socket.on('saleAdded', (data) => {
    $('#dataTableSale').DataTable().row.add({
      invoice: data.invoice,
      time: data.time,
      totalsum: data.totalsum,
      pay: data.pay,
      change: data.change,
      customername: data.customername,
    }).draw(false);
  });
  socket.on('saleUpdated', (data) => {
    const saleRow = $(`#sale-${data.invoice}`);
    saleRow.find('.sale-time').text(data.time);
    saleRow.find('.sale-totalsum').text(new Intl.NumberFormat('id-ID', {
      style: 'currency',
      currency: 'IDR'
    }).format(data.totalsum));
    saleRow.find('.sale-pay').text(new Intl.NumberFormat('id-ID', {
      style: 'currency',
      currency: 'IDR'
    }).format(data.pay));
    saleRow.find('.sale-change').text(new Intl.NumberFormat('id-ID', {
      style: 'currency',
      currency: 'IDR'
    }).format(data.change));
    saleRow.find('.sale-customername').text(data.customername);
  });
  socket.on('saleDeleted', (data) => {
    $('#dataTableSale').DataTable().ajax.reload(null, false);
  });

  socket.on('stockAlert', (data) => {
    console.log(`Stock Alert: ${data.name} only have stock: ${data.stock}, time: ${new Date()}`);

    const alertContainer = $('#alertContainer');
    const alertCounter = $('#alertCounter');

    // Cek jika alert sudah ada berdasarkan barcode
    const existingAlert = alertContainer.find(`.dropdown-item[data-barcode="${data.barcode}"]`);
    if (existingAlert.length === 0) {
      // Jika belum ada, tambahkan alert baru
      const alertItem = $(`
      <a class="dropdown-item d-flex align-items-center" href="#" data-barcode="${data.barcode}" data-name="${data.name}">
        <div class="mr-3">
          <div class="icon-circle bg-warning">
            <i class="fas fa-exclamation-triangle text-white"></i>
          </div>
        </div>
        <div>
          <div class="small text-gray-500">${new Date().toLocaleDateString()}</div>
          <span class="font-weight-bold">Stock Alert: ${data.name} only have stock: ${data.stock}</span>
        </div>
      </a>
    `);
      alertContainer.append(alertItem);
      alertCounter.text(parseInt(alertCounter.text()) + 1);

      // Event listener untuk mengklik alert item
      alertItem.on('click', function () {
        const barcode = $(this).data('barcode');
        const name = $(this).data('name');
        window.location.href = `/purchases/add?barcode=${barcode}&name=${name}`;
      });
    }
  });

  socket.on('removeStockAlert', (data) => {
    console.log(`Remove Stock Alert: ${data.name}, time: ${new Date()}`);

    const alertContainer = $('#alertContainer');
    const alertCounter = $('#alertCounter');
    alertContainer.find(`.dropdown-item[data-barcode="${data.barcode}"]`).remove();
    const currentCount = parseInt(alertCounter.text());
    alertCounter.text(Math.max(currentCount - 1, 0));
  });

  // Function to get query parameter
  function getQueryParam(param) {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get(param);
  }

  // Set goodsBarcode if barcode is present in query string
  $(document).ready(function () {
    const barcode = getQueryParam('barcode');
    const name = getQueryParam('name');

    if (barcode) {
      // Set the value and trigger the change event for Select2
      const option = new Option(`${barcode} - ${name}`, barcode, true, true);
      $('#goodsBarcode').append(option).trigger('change');
      $.ajax({
        url: '/goods/api/goods/' + barcode,
        type: 'GET',
        success: function (data) {
          $('#goodsName').val(data.data.name);
          $('#goodsStock').val(data.data.stock);
          $('#goodsPurchasePrice').val(data.data.purchaseprice);
        },
        error: function (xhr, status, error) {
          console.error(error);
        }
      });

      // Remove the query parameter from the URL
      const url = new URL(window.location);
      url.searchParams.delete('barcode');
      url.searchParams.delete('name');
      window.history.replaceState({}, document.title, url.toString());
    }
  });
</script>
<script src="/javascripts/scripts.js"></script>